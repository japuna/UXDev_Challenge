{"version":3,"sources":["styles/variablesThemes.js","styles/globals.js","styles/headerStyles.js","styles/toggle.styled.js","components/Toggle.js","components/header.js","components/ColourGreenRed.js","styles/followersStyle.js","components/FollowersElements.js","components/Followers.js","components/OverviewElements.js","components/overView.js","styles/modal.js","styles/stadisticStyles.js","components/estadistics.js","components/Charts.js","components/WindowGraphics.js","App.js","reportWebVitals.js","index.js"],"names":["darkTheme","body","textTitle","text","gradientToggle","gradientToggleOver","header","colourCard","cardOver","anotherText","colourSocial","colourMobile","lightTheme","GlobalStyles","createGlobalStyle","theme","Header1","styled","BottonContainer","div","ToggleContainer","button","Toggle","toggleTheme","isLight","onClick","width","height","cx","cy","r","Header","ImageWord","ColourGreenRed","widthDiv","position","image","colorFill","color","colorTitles","styleWords","justifyContent","style","src","alt","CardWithBorder","Card","BorderFollow","IWords","FollowersElements","showFunction","info","setFollowers","q","border","styles","name","backgroundColor","backgroundImage","borderNetworks","className","marginBottom","user","number","letterSpacing","ContainerCards","Followers","CardOverview","OverViewElements","flex","id","TitleOverView","h2","OverViewStyles","OverView","ModalContainer","ModalWindow","InfoEstadistics","CardInfo","Estadistics","estad","colorFIll","data","followers","CustomTooltip","RenderTooltip","active","payload","label","value","Charts","ResponsiveContainer","LineChart","CartesianGrid","strokeDasharray","stroke","XAxis","dataKey","fontSize","YAxis","ticks","domain","Tooltip","content","Line","type","activeDot","dot","fill","WindowsGraphics","showModal","followersObj","cadena","first","charAt","toUpperCase","slice","capital","paddingRight","AnotherColour","MarginDiv","App","useState","setTheme","setShowModal","WindowGraphics","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f89907f.chunk.js","sourcesContent":["/******************************************************************************************************* \r\nVariables of each theme. \r\n*******************************************************************************************************/\r\n\r\n\r\nexport const darkTheme = {\r\n    body: 'hsl(230, 17%, 14%)',\r\n    textTitle: 'hsl(0, 0%, 100%)',\r\n    text: 'hsl(228, 34%, 66%)',\r\n    gradientToggle: 'linear-gradient(to right, hsl(210, 78%, 56%), hsl(146, 68%, 55%))',\r\n    gradientToggleOver: 'linear-gradient(to right, hsl(210, 78%, 56%), hsl(146, 68%, 55%))',\r\n    header: 'hsl(232, 19%, 15%)',\r\n    colourCard: 'hsl(228, 28%, 20%)',\r\n    cardOver: 'hsl(228, 41%, 34%)',\r\n    anotherText: 'white',\r\n    colourSocial:'lightgray;',\r\n    colourMobile: 'hsl(232, 16%, 21%)',\r\n  }\r\n  \r\n  export const lightTheme = {\r\n    body: 'hsl(0, 0%, 100%)',\r\n    textTitle: 'hsl(230, 17%, 14%)',\r\n    text: 'hsl(228, 12%, 44%)',\r\n    gradientToggle: 'hsl(230, 22%, 74%)',\r\n    gradientToggleOver: 'hsl(210, 78%, 56%)',\r\n    header: 'hsl(225, 100%, 98%)',\r\n    colourCard: 'hsl(227, 47%, 96%)',\r\n    cardOver: 'hsl(232, 9%, 86%)',\r\n    anotherText: 'hsl(228, 12%, 44%)',\r\n    colourSocial:'hsl(228, 34%, 66%)',\r\n    colourMobile: 'hsl(225, 48%, 92%)',\r\n    \r\n  }","import { createGlobalStyle } from 'styled-components';\r\n\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n// reset all these values to eliminate the default margin and other caracteristics.\r\nhtml, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, font, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, caption {\r\n        margin: 0;\r\n        padding: 0;\r\n        border: 0;\r\n        outline: 0;\r\n    }\r\n    body {\r\n        font-family: \"Inter\", sans-serif;\r\n        background: ${({ theme }) => theme.body};\r\n        color: ${({ theme }) => theme.text};\r\n        font-size: 100%;\r\n    }\r\n\r\n    h1{\r\n        color: ${({ theme }) => theme.textTitle};\r\n        font-size: 1.7em;\r\n        margin-bottom: 1%;\r\n        font-weight: 600;\r\n    }\r\n\r\n    p{\r\n        font-size: 1em;\r\n        font-weight: 400;\r\n    }\r\n  `;\r\n\r\n\r\n","import styled from 'styled-components';\r\n\r\nexport const Header1 = styled.header`\r\n    width: 100%;\r\n    border-radius: 0 0 10px 10px;\r\n    padding: 3% 0 4% 0;\r\n    display: flex;\r\n    justify-content: space-between;\r\n\r\n    p{\r\n        font-size: 0.8em;\r\n        font-weight: 700;\r\n    }\r\n\r\n    @media only screen and (min-width: 801px) {\r\n      align-items: center;\r\n\r\n      h1{\r\n        margin-top: 0;\r\n      }\r\n      p{\r\n          margin-bottom: 0;\r\n      } \r\n    }\r\n\r\n    @media only screen and (max-width: 800px) {\r\n      align-items: flex-start;  \r\n      h1{\r\n        margin-top: 8%;\r\n      }\r\n      p{\r\n        margin-bottom: 3%;\r\n      } \r\n    }\r\n\r\n    @media only screen and (max-width: 480px) {\r\n      align-items: flex-start;  \r\n      h1{\r\n        margin-top: 5%;\r\n      }\r\n      p{\r\n        margin-bottom: 2%;\r\n      } \r\n    } \r\n`;","import styled from 'styled-components';\r\n\r\n//Button to toggle the theme\r\nexport const BottonContainer = styled.div`\r\n    display: flex;\r\n    height: 22px;\r\n    p{\r\n        align-self: center;\r\n        padding-right: 15px;\r\n    }\r\n\r\n    @media only screen and (min-width: 481px) {\r\n        margin-top: 0%;\r\n      }\r\n  \r\n      @media only screen and (max-width: 480px) {\r\n        margin-top: 2%;  \r\n      } \r\n`\r\n\r\nexport const ToggleContainer = styled.button`\r\n    align-self: center;\r\n    width: 45px;\r\n    height: 22px;\r\n    border-radius: 30px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    position: relative;\r\n    background: ${({ theme }) => theme.gradientToggle};\r\n    border: none;\r\n    outline: none;\r\n    padding-left: 3px;\r\n\r\n        :hover{\r\n            background: ${({ theme }) => theme.gradientToggleOver};\r\n            outline: none;\r\n            cursor: pointer;\r\n        } \r\n    svg {\r\n        height: auto;\r\n        width: 2.5rem;\r\n        transition: all 0.2s linear;\r\n        //this change the position of the circle inside the button. Right to light, left to dark. \r\n        transform: ${({ lightTheme }) => lightTheme ? 'translateX(0)' : 'translateX(24px)'};};\r\n        fill: ${({ lightTheme }) => lightTheme ? 'white' : 'hsl(230, 17%, 14%)' };};\r\n    }\r\n\r\n    \r\n`;","/******************************************************************************************************* \r\nCreate the  bottom to toggle the theme\r\n*******************************************************************************************************/\r\n\r\nimport React from 'react'\r\nimport { func, string } from 'prop-types';\r\nimport { BottonContainer, ToggleContainer } from '../styles/toggle.styled'\r\n\r\nconst Toggle = ({ theme, toggleTheme }) => {\r\n  //toggleTheme: change the value in app  of Theme.\r\n  //theme: light or dark\r\n  const isLight = theme === 'light'; //when the theme is light, isLight is true. To change the button's look\r\n\r\n  \r\n  return (\r\n    <BottonContainer>\r\n    <p>{theme === 'light' ? 'Light Mode' : 'Dark Mode'}    </p>\r\n    <ToggleContainer onClick={toggleTheme}  lightTheme = {isLight}>\r\n          \r\n        <svg width=\"100\" height=\"100\">\r\n          <circle cx=\"8\" cy=\"10\" r=\"8\"></circle>\r\n        </svg>\r\n    </ToggleContainer>\r\n    </BottonContainer>\r\n  );\r\n};\r\n\r\nexport default Toggle; \r\n\r\nToggle.propTypes = {\r\n  theme: string.isRequired,\r\n  toggleTheme: func.isRequired,\r\n}","/******************************************************************************************************* \r\nThis component creates the header.\r\n*******************************************************************************************************/\r\n\r\nimport React from 'react'\r\nimport {Header1} from '../styles/headerStyles' //required styled components\r\nimport Toggle from './Toggle' // button to toggle the theme\r\n\r\n\r\nconst Header = ({ theme, toggleTheme }) => {\r\n  return (\r\n    <Header1>\r\n            <div>\r\n                <h1>Social Media Dashboard</h1>\r\n                <p>Total Followers: 23,004</p>\r\n            </div>\r\n            <Toggle  theme = {theme} toggleTheme={toggleTheme} />{/*button to toggle the theme*/ }\r\n     </Header1>   \r\n  \r\n  );\r\n};\r\n\r\nexport default Header;","/******************************************************************************************************* \r\nThis component changes the colour and the image (up or down) in the estadistics. \r\n*******************************************************************************************************/\r\n\r\n\r\nimport React from 'react'\r\nimport styled from 'styled-components';\r\n\r\n//determine which colour shows in the estadistics with a variable; up (green) or down (red) \r\nconst colorTitles = (image) =>{\r\n  if(image === \"up\"){\r\n    return( {color: `hsl(163, 72%, 41%)`})\r\n  }else if (image === \"down\"){\r\n    return( {color: `hsl(356, 69%, 56%)`})\r\n  }else{\r\n    return( {color: `white`})\r\n  }\r\n  \r\n}\r\n\r\nconst ImageWord = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst ColourGreenRed = ({ widthDiv, position, image, text }) => {\r\n  /*\r\n      receive widthDiv: width of cointainer\r\n      position: align of the element (center, flex-end)\r\n      image: string with up or down to change the color\r\n      text: text inside the container\r\n  */\r\n  let colorFill = colorTitles(image); //Colour of text \r\n\r\n  let styleWords ={\r\n    width: `${widthDiv}`,\r\n    justifyContent: `${position}` \r\n  }\r\n  return (\r\n          <ImageWord style = {styleWords}>\r\n            <img style = {{ height: \"27%\"}} src= {`../imagenes/icon-${image}.svg`} alt =\"Movements in followers\" />&nbsp;\r\n            <p style = { colorFill }>{text}</p>\r\n          </ImageWord> \r\n  );\r\n};\r\n\r\nexport default ColourGreenRed;","import styled from 'styled-components';\r\n\r\n//because of the problem with the border with gradient, I create a little div with the colour. \r\nexport const CardWithBorder= styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n\r\n\r\n    @media only screen and (min-width: 481px) {\r\n      width: 23%;\r\n      margin-bottom: 0;\r\n    }\r\n\r\n    @media only screen and (max-width: 480px) {\r\n      width: 48%;  \r\n      margin-bottom: 3%;\r\n    } \r\n`\r\n//all the styles for follower's cards\r\nexport const Card = styled.div`\r\n    width: 100%;\r\n    border-radius: 0 0 4px 4px ;\r\n    background-color: ${({ theme }) => theme.colourCard}; \r\n    display: flex;\r\n    \r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column; // the information is vertical\r\n    :hover{\r\n        background-color: ${({ theme }) => theme.cardOver}; \r\n        cursor: pointer;\r\n    }\r\n\r\n    h2{\r\n      color: ${({ theme }) => theme.textTitle};\r\n    }\r\n    p{  \r\n      font-weight:600;  \r\n    }\r\n\r\n    @media only screen and (min-width: 481px) {\r\n      height: 195px;\r\n      h2{\r\n        font-size: 3.2em;\r\n      }\r\n      p{\r\n        font-size: 0.7em;\r\n      }    \r\n    }\r\n\r\n    @media only screen and (max-width: 480px) {\r\n      height: 150px;\r\n      h2{\r\n        font-size: 2.8em;\r\n      } \r\n      p{\r\n        font-size: 0.8em;\r\n      } \r\n    } \r\n\r\n   \r\n\r\n    \r\n`;\r\n//  border in followers\r\nexport const BorderFollow = styled.div`\r\n    width: 100%;\r\n    height: 4px;\r\n    border-radius: 4px 4px 0 0;\r\n    background-color: white;\r\n\r\n`;\r\n//little styled component to stylizing the div that is made of an image an a little text.\r\nexport const IWords = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n`;","/******************************************************************************************************* \r\nThis component creates each element (card) inside the container followers.\r\n*******************************************************************************************************/\r\n\r\nimport React from 'react'\r\nimport ColourGreenRed from './ColourGreenRed';\r\nimport { IWords, CardWithBorder, BorderFollow, Card } from '../styles/followersStyle' //required styled components\r\n\r\n\r\nconst FollowersElements = ({showFunction, info, setFollowers}) => {\r\n  /*\r\n    showFunction: Function shows the modal assigning true to state showModal in app.\r\n    info: All the information that is used to fill all the containers\r\n       name: Social network (facebook, instagram, etc.)\r\n       image: up or down (to change the image and the color in the text)\r\n       number: big number in the container \r\n       q: number of new followers today\r\n       user:  name in the social network\r\n  */\r\n\r\n  let text = info.q;\r\n  text = text + \" today\";\r\n\r\n  /*change the value of showModal in app.js. With SetFollowers, \r\n  the modal receives all the needed info to fill all the cointainers */ \r\n  const showModal = () =>{\r\n    setFollowers(info);\r\n    showFunction();\r\n  }\r\n  /*\r\n    Asign the top - border of the cointainer. it depends of the name (social network). Due to the problem with\r\n    the color border in gradient, I created a little div that simulates this border.\r\n  */\r\n  const borderNetworks = () =>{\r\n    let styles = {};\r\n    switch (info.name){\r\n      case \"facebook\":\r\n       styles = {backgroundColor: `hsl(195, 100%, 50%)`}   \r\n      break;\r\n      \r\n      case \"twitter\":\r\n        styles =  {backgroundColor: `hsl(203, 89%, 53%)`}   \r\n      break;\r\n\r\n      case \"instagram\":\r\n        styles = {backgroundImage: `linear-gradient(to right, hsl(37, 97%, 70%), hsl(329, 70%, 58%))`};\r\n      break;\r\n\r\n      case \"youtube\":\r\n        styles = {backgroundColor: `hsl(348, 97%, 39%)`}   \r\n      break;\r\n      \r\n\r\n      default:\r\n        styles = {};\r\n        break;\r\n\r\n        \r\n\r\n    }\r\n    return (styles);\r\n  }\r\n\r\n  let border = borderNetworks();\r\n\r\n\r\n\r\n  return (\r\n    <CardWithBorder>\r\n    <BorderFollow style = {border}/>\r\n    <Card className = {info.name} onClick = {showModal}>\r\n          <div className= \"border\"></div>\r\n          <IWords style ={{marginBottom: \"6% \"}}>  \r\n          {/* the image is called when the name of the social network*/}\r\n            <img src= {`../imagenes/icon-${info.name}.svg`}  alt =\"Social Media\" />&nbsp;&nbsp;\r\n            <p>{ info.user }</p>\r\n          </IWords>\r\n          <h2>{info.number}</h2>\r\n          <p style={{letterSpacing: \"4px\", marginBottom: \"6% \"}}>{info.name!==\"youtube\" ?(\"FOLLOWERS\"):(\"SUSCRIBERS\")}</p>\r\n          <ColourGreenRed widthDiv = {\"100%\"} position = { \"center\"} image = {info.image} text = { text } />\r\n          \r\n    </Card>   \r\n    </CardWithBorder>\r\n  \r\n  );\r\n};\r\n\r\nexport default FollowersElements;","/******************************************************************************************************* \r\nThis component creates the stadistics of followers. the fris container after the header in the dashboard.\r\n*******************************************************************************************************/\r\n\r\nimport React from 'react'\r\nimport FollowersElements from './FollowersElements'\r\nimport styled from 'styled-components';\r\n\r\n\r\n//This styled component defines the main container in this section\r\nexport const ContainerCards = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    flex-wrap: wrap;\r\n`\r\n\r\n\r\nconst Followers = ({ showFunction, setFollowers }) => {\r\n \r\n  return (\r\n    <ContainerCards> \r\n        <FollowersElements showFunction = {showFunction} setFollowers = {setFollowers} info = {{name: 'facebook', image: 'up', number: '1987', q: \"12\", user: \"@nathanf\"}}/>\r\n        <FollowersElements showFunction = {showFunction} setFollowers = {setFollowers} info = {{name: 'twitter', image: 'up', number: '1044', q: \"99\", user: \"@nathanf\"}}/>\r\n        <FollowersElements showFunction = {showFunction} setFollowers = {setFollowers} info = {{name: 'instagram', image: 'up', number: '11K', q: \"1099\", user: \"@realnathanf\"}}/>\r\n        <FollowersElements showFunction = {showFunction} setFollowers = {setFollowers} info = {{name: 'youtube', image: 'down', number: '8239', q: \"144\", user: \"Nathan F.\"}}/>\r\n    </ContainerCards>   \r\n  );\r\n};\r\n\r\nexport default Followers;","/******************************************************************************************************* \r\nCreate the elements inside the overviews. Each of the squares.\r\n*******************************************************************************************************/\r\n\r\nimport React from 'react'\r\nimport styled from 'styled-components';\r\nimport ColourGreenRed from './ColourGreenRed'\r\n\r\n\r\n\r\nexport const CardOverview = styled.div`\r\n    height: 70px;\r\n    border-radius: 4px;\r\n    background-color: ${({ theme }) => theme.colourCard}; \r\n    display: flex; /*Create a flexbox*/\r\n    margin-bottom: 2%;\r\n    flex-direction: row;\r\n    align-content: space-between;\r\n    justify-content: space-between; /*Space beween th elements. To separate the elements*/\r\n    align-items: center;\r\n    padding: 15px 3%;\r\n    flex-wrap: wrap;\r\n    h3{\r\n      font-size: 1.7em;;\r\n      color: ${({ theme }) => theme.textTitle};\r\n    }\r\n    p{\r\n        font-weight:600;\r\n    }\r\n\r\n    @media only screen and (min-width: 481px) {\r\n      width: 17%;\r\n      padding: 15px 3%;\r\n      p{\r\n        font-size: 0.7em;\r\n      }\r\n    }\r\n\r\n    @media only screen and (max-width: 480px) {\r\n      width: 42%;  \r\n      padding: 3%;\r\n      p{\r\n        font-size: 0.8em;\r\n      }\r\n    } \r\n\r\n`;\r\n\r\n\r\n\r\n\r\n\r\nconst OverViewElements = ({ info }) => {\r\n/* \r\n    info: All the information that is used to fill all the containers\r\n       name: Social network (facebook, instagram, etc.)\r\n       image: up or down (to change the image and the color in the text)\r\n       number: big number in the container \r\n       q: number of new followers today\r\n       id:  Titlte of the section\r\n       */\r\n\r\n  return (\r\n      <CardOverview>\r\n        <p style ={{flex : \"50%\"}}>{info.id}</p>\r\n        <img src= {`../imagenes/icon-${info.name}.svg`} alt =\"Social Media\" />\r\n        <h3 style ={{flex : \"50%\"}}>{info.number}</h3>\r\n        <ColourGreenRed widthDiv = {\"auto\"} position = { \"flex-end\"} image = {info.image} text = { info.q } />\r\n      </CardOverview>\r\n     \r\n  \r\n  );\r\n};\r\n\r\nexport default OverViewElements;","import React from 'react'\r\nimport styled from 'styled-components';\r\nimport OverViewElements from './OverviewElements';\r\n\r\nexport const TitleOverView = styled.h2`\r\n    margin: 4% 0 2% 0;\r\n    color: ${({ theme }) => theme.anotherText};\r\n    font-weight: 600;\r\n\r\n    @media only screen and (min-width: 481px) {\r\n      font-size: 1.5em;\r\n    }\r\n\r\n    @media only screen and (max-width: 480px) {\r\n      font-size: 1.3em; \r\n    } \r\n\r\n\r\n`;\r\n\r\nexport const OverViewStyles = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: space-between;\r\n`;\r\n\r\nconst OverView = ({ theme, toggleTheme }) => {\r\n  return (\r\n     <> \r\n    <TitleOverView>Overview - Today</TitleOverView>\r\n      <OverViewStyles>\r\n        <OverViewElements info = {{name: 'facebook', image: 'up', number: '87', q: \"3%\", id: 'Page Views'}}/>\r\n        <OverViewElements info = {{name: 'facebook', image: 'down', number: '52', q: '2%', id: 'Likes'}}/>\r\n        <OverViewElements info = {{name: 'instagram', image: 'up', number: '5462', q: '2257%', id: 'Likes'}}/>\r\n        <OverViewElements info = {{name: 'instagram', image: 'up', number: '52K', q: '1357%', id: 'Profile Views'}}/>\r\n        <OverViewElements info = {{name: 'twitter', image: 'up', number: '117', q: '303%', id: 'Retweets'}}/>\r\n        <OverViewElements info = {{name: 'twitter', image: 'up', number: '507', q: '553%', id: 'Likes'}}/>\r\n        <OverViewElements info = {{name: 'youtube', image: 'down', number: '107', q: '19%', id: 'Likes'}}/>\r\n        <OverViewElements info = {{name: 'youtube', image: 'down', number: '1407', q: '12%', id: 'Total views'}}/>\r\n      </OverViewStyles>\r\n    </>  \r\n\r\n  );\r\n};\r\n\r\nexport default OverView;","import styled from 'styled-components';\r\n\r\n//background of modal\r\nexport const ModalContainer = styled.div`\r\n    position: absolute; // No space is create for this element in the page. so it's palced with top and left \r\n    z-index: 200;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: hsla(228, 0%, 15%, 0.8);\r\n    display: flex; \r\n    top: 0;\r\n    left: 0;\r\n    justify-content: center;\r\n    align-items: center;      \r\n\r\n  \r\n  `;\r\n\r\n  //modal\r\n  export const ModalWindow = styled.div`\r\n    z-index: 200; // to put over the background \r\n    height: auto;\r\n    background-color: ${({ theme }) => theme.body};\r\n    border-radius: 14px;  \r\n\r\n    //the first segment of the modal. \r\n    .data{\r\n        width: 91%;\r\n        background-color: ${({ theme }) => theme.header};\r\n        padding: 2% 2% 2% 6%;\r\n        border-radius: 14px 14px 0 0;\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n\r\n\r\n    //cointainer of X to exit the modal  \r\n    .data__exit{\r\n        width: 100%;\r\n        text-align: right;\r\n        font-size: 0.8em;\r\n        cursor: pointer;\r\n    } \r\n    \r\n    .data__exit p{\r\n        font-weight: 600;\r\n        color: ${({ theme }) => theme.textTitle};\r\n        text-decoration:none; \r\n    }   \r\n    .data__nameNetwork{\r\n        font-size: 0.8em;\r\n        font-weight: 600;\r\n        color: ${({ theme }) => theme.colourSocial};\r\n        \r\n    }\r\n     // container with the chart.  \r\n    .graphics{\r\n        width: 88%;\r\n        height: 220px;\r\n        padding: 3% 3% 4% 2%;\r\n\r\n    }\r\n\r\n    .graphics p{\r\n        margin-left: 5%; \r\n        margin-bottom: 2%; \r\n        color: ${({ theme }) => theme.colourSocial};\r\n    }\r\n\r\n    @media only screen and (min-width: 801px) {\r\n        width: 68%;\r\n      }\r\n\r\n      @media only screen and (max-width: 800px) {\r\n        width: 90%;  \r\n\r\n        .data__exit p{\r\n          font-size: 1.4em;\r\n        }  \r\n      }  \r\n  \r\n      @media only screen and (max-width: 480px) {\r\n        width: 94%;  \r\n      } \r\n  `;\r\n\r\n  export const InfoEstadistics = styled.div`\r\n        width: 100%\r\n        height: auto;\r\n        display: flex;\r\n        margin-top: 4%;\r\n        flex-direction: row;\r\n        flex-wrap: wrap;\r\n        \r\n      \r\n          @media only screen and (max-width: 480px) {\r\n            justify-content: space-between;\r\n          } \r\n  `;","import styled from 'styled-components';\r\n\r\nexport const CardInfo = styled.div` \r\n    height: auto;\r\n    margin-right: 4%; \r\n    display: flex;\r\n    align-items: center;\r\n    \r\n\r\n    h2{\r\n        color: ${({ theme }) => theme.textTitle};    \r\n    }\r\n    p{\r\n        font-size:0.7rem;\r\n        margin-left: 12%;\r\n        font-weight: 600;\r\n    } \r\n    \r\n    @media only screen and (min-width: 481px) {\r\n      width: 21%;\r\n      h2{\r\n        font-size: 2em;\r\n      }  \r\n    }\r\n\r\n    @media only screen and (max-width: 480px) {\r\n      width: 40%;  \r\n\r\n      h2{\r\n        font-size: 1.8em;\r\n      }\r\n    } \r\n\r\n`;\r\n\r\nexport const ImageWord = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    \r\n    img{\r\n        padding-right: 10%;\r\n    }\r\n\r\n    \r\n    \r\n`\r\n\r\n","/******************************************************************************************************* \r\nThis component creates the cointainers of stadistics inside the modal.\r\n*******************************************************************************************************/\r\n\r\nimport React from 'react'\r\nimport {CardInfo, ImageWord} from '../styles/stadisticStyles'\r\n\r\n\r\n//define the colour of the text \r\nconst colorTitles = (image) =>{\r\n  if(image === \"up\"){\r\n    return( {color: `hsl(163, 72%, 41%)`})\r\n  }else if (image === \"down\"){\r\n    return( {color: `hsl(356, 69%, 56%)`})\r\n  }else{\r\n    return( {color: `white`})\r\n  }\r\n  \r\n}\r\n\r\nconst Estadistics = ({ number, estad, image}) => {\r\n  let colorFIll = colorTitles(image);\r\n\r\n  return (\r\n    <CardInfo>\r\n          <ImageWord>\r\n              {image !== \"\" ?(<img style = {{ width: \"12px\"}} src= {`../imagenes/icon-${image}.svg`} alt =\"Up\" />):(<></>)}\r\n              <h2>{number}</h2>\r\n            </ImageWord> \r\n          <p style = { colorFIll }>{estad}</p>     \r\n    </CardInfo>   \r\n  \r\n  );\r\n};\r\n\r\nexport default Estadistics;\r\n \r\n\r\n\r\n","/******************************************************************************************************* \r\nThis component draws the chart inside the modal.\r\n*******************************************************************************************************/\r\n\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\r\n// Recharts draws the chart.  \r\n\r\n/*\r\nvariable data sets the info in the chart. Name: is in X, followers in Y. \r\n*/\r\nconst data = [\r\n    {\r\n        name: '',\r\n        followers: 4,\r\n      },\r\n  {\r\n    name: '4',\r\n    followers: 3,\r\n  },\r\n  {\r\n    name: '5',\r\n    followers: 2,\r\n  },\r\n  {\r\n    name: '6',\r\n    followers: 6,\r\n  },\r\n  {\r\n    name: '7',\r\n    followers: 8,\r\n  },\r\n  {\r\n    name: '8',\r\n    followers: 9,\r\n  },\r\n  {\r\n    name: '9',\r\n    followers: 10,\r\n  },\r\n  {\r\n    name: '10',\r\n    followers: 9,\r\n  },\r\n  {\r\n    name: '11',\r\n    followers: 10,\r\n  },\r\n\r\n  {\r\n    name: '12',\r\n    followers: 12,\r\n  },\r\n\r\n  {\r\n    name: '13',\r\n    followers: 12,\r\n  },\r\n\r\n];\r\n/*\r\nThis styled component costumizes the Chart's ToopTip \r\n*/\r\nexport const CustomTooltip = styled.div`\r\n  \r\n  background-color: ${({ theme }) => theme.body};\r\n  border: 1px solid hsl(243, 51%, 70%);\r\n  border-radius: 2px;\r\n  width:120px;\r\n  padding: 3% 1%;\r\n  text-align: center;\r\n  p{\r\n    color: hsl(243, 51%, 70%);\r\n    font-size: 0.8rem;\r\n  }\r\n`;\r\n\r\n/*\r\n  this function uploads the information inside the Tooltip, when the users is over a dot in the line. payload[0] is the value in y \r\n*/\r\nconst RenderTooltip = ({ active, payload, label }) =>{\r\n  if(active){\r\n  return (\r\n    <CustomTooltip>\r\n      <p className=\"label\">{`New followers: ${payload[0].value}`}</p>\r\n    </CustomTooltip>\r\n  );\r\n  }\r\n  return null;\r\n}\r\n\r\n\r\nconst Charts = () => {\r\n    return (\r\n      \r\n      <ResponsiveContainer width=\"100%\" height=\"95%\">{/* container responsive where is placed the chart */}\r\n        <LineChart\r\n          width={800}\r\n          height={80}\r\n          data={data}\r\n        >\r\n          <CartesianGrid strokeDasharray= \"3 3\" stroke = \"hsla(243, 51%, 70%, 0.2)\" />\r\n         \r\n          <XAxis dataKey=\"name\" style={{fontSize:\"0.7em\"}}/>\r\n           {/* name form data is palced in x axis. */}\r\n          <YAxis  ticks={[0, 2, 4, 6, 8, 10, 12]} domain={[0, 13]} style={{fontSize:\"0.7em\"}}/>\r\n          {/* define the steps to put inside the y axis */}\r\n          <Tooltip content={ <RenderTooltip /> } width={\"auto\"}/>  \r\n          {/* Defines the element that is shoed when the mouse is over a dot */}        \r\n          <Line type=\"monotone\" dataKey=\"followers\" stroke=\"hsl(243, 51%, 70%)\" activeDot={{ r: 7 }} dot={{ r: 4, fill: 'none'}}/>\r\n          {/* the line in the chart. it defines the radio of the dot and its color when the mouse is \r\n          over (active) or when is not */}        \r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    );\r\n}\r\n\r\nexport default Charts;\r\n","/******************************************************************************************************* \r\nCreate the modal\r\n*******************************************************************************************************/\r\n\r\nimport React from 'react'\r\nimport { ModalWindow, ModalContainer, InfoEstadistics } from '../styles/modal.js'// required styled components\r\nimport Estadistics from './estadistics'//Estadistics of the modal.\r\nimport Charts from './Charts' // chart inside the modal\r\nimport styled from 'styled-components';\r\n\r\nconst ImageWord = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    \r\n    img{\r\n        padding-right: 10%;\r\n    }\r\n    \r\n`\r\n\r\nconst WindowsGraphics = ({showModal, showFunction , followersObj}) => {\r\n/*\r\n    showModal: variable that changes the visibility of the modal. It's a state in app.js\r\n    showFunction: function to change the value of showModal\r\n    followerobj: this object has all the information to fill the modal. \r\n    This information depends of the element in followers that the users has clicked and it's a state in app.js too\r\n\r\n\r\n\r\n*/\r\n     //Uppercase the first lleter in name   \r\n    const capital = (cadena) =>{\r\n        let first = cadena.charAt(0);\r\n        first = first.toUpperCase();\r\n        let otro = cadena.slice(1);\r\n        return first + otro;\r\n    }\r\n    return (\r\n        <>\r\n        {showModal ?(<ModalContainer>  \r\n          <ModalWindow id =\"window\" >\r\n                <div className = \"data\">\r\n                    <div onClick = {()=>{showFunction(false)}} className = \"data__exit\"><p>X</p></div>\r\n                    <h1>{capital (followersObj.name)} followers</h1>\r\n                    <ImageWord ><img style = {{paddingRight: \"1%\"}} src= {`../imagenes/icon-${followersObj.name}.svg`} \r\n                    alt =\"Social Media\"/><p className = \"data__nameNetwork\" >{followersObj.user}</p></ImageWord>\r\n                    <InfoEstadistics>\r\n                        <Estadistics  number = {followersObj.number} estad ={\"Total followers\"} image = {\"\"}/>\r\n                        <Estadistics number = {\"81\"} estad = {\"New followers in the past 10 days\"} \r\n                        image = {followersObj.image}/>\r\n                        <Estadistics number = {followersObj.q} estad = {\"New followers TODAY\"}\r\n                        image = {followersObj.image}/>       \r\n                    </InfoEstadistics>\r\n                </div>\r\n\r\n                <div className = \"graphics\">\r\n                    <p>May 4 - May 13</p>\r\n                    <Charts />\r\n                </div>\r\n                \r\n          </ModalWindow>\r\n       </ModalContainer>):(<></>)}\r\n       </>\r\n  \r\n  );\r\n};\r\n\r\nexport default WindowsGraphics;\r\n\r\n\r\n\r\n","// App.js\n/*\nMain file. \n\n*/\nimport React, { useState } from 'react';\nimport {  ThemeProvider } from 'styled-components'; // Provides the theme to the other components\nimport styled from 'styled-components'; \nimport { lightTheme, darkTheme } from './styles/variablesThemes'; // variables for  bulding the themes\nimport { GlobalStyles} from './styles/globals'; // Global styles\nimport Header from './components/header'; // header\nimport Followers from './components/Followers'; // bring the follower section\nimport OverView from './components/overView'; // bring the overview section\nimport WindowGraphics from './components/WindowGraphics' // modal. \n\n// Another color in the background. \nexport const AnotherColour = styled.div`\n  width: 100%;\n  height: 220px;\n  background: ${({ theme }) => theme.header}; \n  position: absolute;\n  z-index:0;\n\n  \n  @media only screen and (min-width: 481px) {\n    background: ${({ theme }) => theme.header};\n  }\n\n  @media only screen and (max-width: 480px) {\n    background: ${({ theme }) => theme.colourMobile};\n  }\n\n\n`\n// this component helps us to put the margin to all the elements in the dashboard.\nexport const MarginDiv = styled.div`\n    position: relative;\n    z-index: 100;\n\n    @media only screen and (min-width: 800px) {\n      width: 74%;\n      margin-left: 13%;          \n\n    }\n\n    @media only screen and (max-width: 800px) {\n      width: 86%;\n      margin-left: 7%;\n\n    }\n`\n\nfunction App() {\n  const [theme, setTheme] = useState('dark'); // This state controls the theme switcher\n  const [showModal, setShowModal] = useState(false); // Show and hide the modal.\n  //This object has all the information to fill the follower section and the modal \n  const [followersObj, setFollowers] = useState({\n    name: 'facebook',\n    image: 'up',\n    number: '1987',\n    q: '12',\n    user: '@nathanf'\n\n  });\n\n   /*This function changes the theme variable's value. Theme state varible controls the theme that is showed \n   For instance, when theme is Light, the interface changes to the theme: Light\n   */\n  const toggleTheme = () => {\n    if (theme === 'light') {\n      setTheme('dark');\n    } else {\n      setTheme('light');\n    }\n  }\n\n  /*when the user clicks in a element from the follower section, this function changes the value of ShowModal\n  to true. It makes the modal visible. \n  */\n  const showModalFunction = () =>{\n      setShowModal(true);\n  }\n  \n  // Return the layout based on the current theme\n  return (\n    <ThemeProvider theme={theme === 'light' ? lightTheme : darkTheme}>\n      {/*Theme: provies the theme */}\n        <GlobalStyles />\n        <AnotherColour />\n        <MarginDiv>\n          <Header  theme = {theme} toggleTheme={toggleTheme}/>\n          <Followers showFunction = {showModalFunction} setFollowers = { setFollowers }/>\n          <OverView />\n        </MarginDiv> \n        <WindowGraphics \n            showModal = {showModal} \n            showFunction = { setShowModal} \n            followersObj = { followersObj} />  \n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}